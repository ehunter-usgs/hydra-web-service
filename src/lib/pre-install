#!/usr/bin/env node

var fs = require('fs'),
    inquirer = require('inquirer');


// work from same directory as this script
process.chdir(__dirname);


var configFile,
    nonInteractive,
    questions;

configFile = '../conf/config.json';

nonInteractive = false;
if (process.env.NON_INTERACTIVE === 'true') {
  nonInteractive = true;
  process.stderr.write('Running in non-interactive mode\n');
  if (fs.existsSync(configFile)) {
    process.stderr.write('Configuration already exists,' +
        ' refusing to overwrite in non-interactive mode\n');
    process.exit();
  }
}


questions = [
  {
    'type': 'input',
    'name': 'MOUNT_PATH',
    'message': 'URL path for application',
    'default': '/ws/hydra'
  },
  {
    'type': 'input',
    'name': 'PORT',
    'message': 'port where server should bind',
    'default': 8000
  },
  {
    'type': 'input',
    'name': 'DB_DSN',
    'message': 'Database connection string',
    'default': null
  },
  {
    'type': 'input',
    'name': 'DB_USER',
    'message': 'Database username',
    'default': null
  },
  {
    'type': 'password',
    'name': 'DB_PASS',
    'message': 'Database password',
    'default': null
  }
];



new Promise(function (resolve, reject) {
  var config;

  if (nonInteractive) {
    config = {};
    process.stderr.write('Configuration does not exist and non-interactive,' +
        ' using defaults');
    questions.forEach(function (q) {
      config[q.name] = ('default' in q) ? q.default : null;
    });
    resolve(config);
  } else {
    inquirer.prompt(questions).then(resolve, reject);
  }
}).then(function (config) {
  // write configuration
  fs.writeFileSync(configFile, JSON.stringify(config, null, 2));
}).catch(function (err) {
  process.stderr.write('Error running pre-install: ' + err.message + '\n');
  process.exit(1);
});
